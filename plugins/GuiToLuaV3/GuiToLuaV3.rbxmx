<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Folder" referent="RBXC9FD3F4BD1BD49759F9A3D1B83E5E10A">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">GuiToLuaV3</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
		<Item class="ModuleScript" referent="RBXA5FACBED307F46DAAA4C1B92E3BF0A42">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">ToString</string>
				<string name="ScriptGuid">{AC1A69C1-1A04-4644-A76A-72A0F63461FF}</string>
				<ProtectedString name="Source"><![CDATA[local typeof = typeof or type;
local format = string.format;
local sub = string.sub;
local gsub = string.gsub;
local match = string.match;

local tostring2 = nil;

local Types;
do --types
	Types = {
		string = function(Value)
			return format('"%s"', gsub(gsub(Value, '\n', '\\n'), '"', '\\"'));
		end,
		table = function(Table)
			local InsideStr = '';

			local Iter = 0;

			for Index, Value in next, Table do
				Iter = Iter + 1;
				local Index = Index;
				local Value = tostring2(Value);
				if type(Index) == 'number' and Index == Iter then
					InsideStr = InsideStr .. format('%s, ', Value);
				else
					InsideStr = InsideStr .. format('[%s] = %s, ', tostring2(Index), Value);
				end;
			end;

			return format('{%s}', sub(InsideStr, 1, -3));
		end,
		tuple = function(...)
			local Args = {};
			if select('#', ...) == 1 and type((...)) == 'table' then
				Args = (...);
			else
				Args = {...};
			end;

			local InsideStr = '';
			for Index, Value in next, Args do
				InsideStr = InsideStr .. tostring2(Value) .. ', ';
			end;
			return sub(InsideStr, 1, -3);
		end,
	};
end;

local tuple = Types.tuple;
local DataTypes;
do --datatypes
	DataTypes = {
		Axes = function(Value)
			local InsideStr = '';

			if Value.X then
				InsideStr ..= 'Enum.Axis.X, ';
			end;
			if Value.Y then
				InsideStr ..= 'Enum.Axis.Y, ';
			end;
			if Value.Z then
				InsideStr ..= 'Enum.Axis.Z, ';
			end;

			for I, V in next, Enum.NormalId:GetEnumItems() do
				if V and V.Name and Value[V.Name] then
					InsideStr ..= tostring(V) .. ', ';
				end;
			end;

			return format('Axes.new(%s)', sub(InsideStr, 1, -3));
		end,
		BrickColor = function(Value)
			return format('BrickColor.new(%s)', tostring2(Value.Name));
		end,
		CFrame = function(Value) 
			return format('CFrame.new(%s)', tostring(Value));
		end,
		Color3 = function(Value)
			return format('Color3.fromRGB(%s)', tuple(Value.R * 255, Value.G * 255, Value.B * 255));
		end,
		ColorSequence = function(Value)
			return format('ColorSequence.new%s', tostring2(Value.Keypoints));
		end,
		ColorSequenceKeypoint = function(Value)
			return format('ColorSequenceKeypoint.new(%s)', tuple(Value.Time, Value.Value));
		end,
		EnumItem = function(Value)
			return format('Enum.%s.%s', tostring(Value.EnumType), Value.Name);
		end,
		Faces = function(Value)
			local InsideStr = '';

			for I, V in next, Enum.NormalId:GetEnumItems() do
				if V and V.Name and Value[V.Name] then
					InsideStr = InsideStr .. tostring(V) .. ', ';
				end;
			end;

			return format('Faces.new(%s)', sub(InsideStr, 1, -3));
		end,
		FloatCurveKey = function(Value)
			return format('FloatCurveKey.new(%s)',  tuple(Value.Time, Value.Value, Value.Interpolation));
		end,
		Instance = function(Value)
			if Value == game then 
				return 'game';elseif Value == workspace then
				return 'workspace';elseif game:GetService("Players").LocalPlayer and Value == game:GetService("Players").LocalPlayer then
				return 'game:GetService("Players").LocalPlayer';elseif Value.Parent and Value.Parent == game and Value.ClassName then
				return format('game:GetService(%s)', tostring2(Value.ClassName));
			end;
			local Result = '';

			repeat 
				local Name = Value.Name;

				if Value.Parent then
					if Value == game then 
						Result = 'game' .. Result;elseif Value == workspace then
						Result = 'workspace' .. Result;elseif game:GetService("Players").LocalPlayer and Value == game:GetService("Players").LocalPlayer then
						Result = '.LocalPlayer' .. Result;elseif Value.Parent and Value.Parent == game and Value.ClassName then
						Result = format('game:GetService(%s)', tostring2(Value.ClassName)) .. Result;
					elseif match(Name, '%W') then
						Result = format('["%s"]', Name:gsub('%W', function(CH)return '\\' .. CH; end)) .. Result;
					else
						Result = format('.%s', Name) .. Result;
					end;
					Value = Value.Parent;
				else
					Value = game;
				end;
			until not Value or Value == game

			return Result;
		end,
		NumberRange = function(Value)
			return format('NumberRange.new(%s)', tuple(Value.Min, Value.Max));
		end,
		NumberSequence = function(Value)
			return format('NumberSequence.new%s', tostring2(Value.Keypoints));
		end,
		NumberSequenceKeypoint = function(Value)
			return format('NumberSequenceKeypoint.new(%s)', tuple(Value.Time, Value.Value, Value.Envelope));
		end,
		PathWaypoint = function(Value)
			return format('PathWaypoint.new(%s)', tuple(Value.Position, Value.Action));
		end,
		PhysicalProperties = function(Value)
			return format('PhysicalProperties.new(%s)', tuple(Value.Density, Value.Friction, Value.Elasticity, Value.FrictionWeight, Value.ElasticityWeight));
		end,
		Ray = function(Value)
			return format('Ray.new(%s)', tuple(Value.Origin, Value.Direction));
		end,
		Rect = function(Value)
			return format('Rect.new(%s)', tuple(Value.Min, Value.Max));
		end,
		Region3int16 = function(Value)
			return format('Region3int16.new(%s)', tuple(Value.Min, Value.Max));
		end,
		TweenInfo = function(Value)
			return format('TweenInfo.new(%s)', tuple(Value.Time, Value.EasingStyle, Value.EasingDirection, Value.RepeatCount, Value.Reverses, Value.DelayTime));
		end,
		UDim = function(Value)
			return format('UDim.new(%s)', tuple(Value.Scale, Value.Offset));
		end,
		UDim2 = function(Value)
			local X = Value.X;
			local Y = Value.Y;
			return format('UDim2.new(%s)', tuple(X.Scale, X.Offset, Y.Scale, Y.Offset));
		end,
		Vector2 = function(Value)
			return format('Vector2.new(%s)', tuple(Value.X, Value.Y));
		end,
		Vector2int16 = function(Value)
			return format('Vector2int16.new(%s)', tuple(Value.X, Value.Y));
		end,
		Vector3 = function(Value)
			return format('Vector3.new(%s)', tuple(Value.X, Value.Y, Value.Z));
		end,
		Vector3int16 = function(Value)
			return format('Vector3int16.new(%s)', tuple(Value.X, Value.Y, Value.Z));
		end,
	};
end;

tostring2 = function(Value)
	local Type = typeof(Value);
	if DataTypes[Type] then
		return DataTypes[Type](Value);
	end;
	if Types[Type] then
		return Types[Type](Value);
	end;

	return tostring(Value);
end;

return {tostring2, Types, DataTypes};]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="ModuleScript" referent="RBX6F3134BED56B4B0DB096D4336A3E45C8">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Properties</string>
				<string name="ScriptGuid">{4C0E9F01-A1C2-4FAB-9876-7D55CD509090}</string>
				<ProtectedString name="Source"><![CDATA[local properties = {
	ScreenGui = {
		--data
		'DisplayOrder',
		'Enabled',
		'IgnoreGuiInset',
		'Name',
		'Parent',
		'ResetOnSpawn',
		'ZIndexBehavior',
		--behavior
		'Archivable',
		--Localiztation
		'AutoLocalize',
		'RootLocalizationTable'
	},
	TextButton = {
		--data
		'Active',
		'AnchorPoint',
		'AutoButtonColor',
		'AutomaticSize',
		'BackgroundColor3',
		'BackgroundTransparency',
		'BorderColor3',
		'BorderMode',
		'BorderSizePixel',
		'LayoutOrder',
		'Modal',
		'Name',
		'Parent',
		'Position',
		'Rotation',
		'Selectable',
		'Selected',
		'Size',
		'SizeConstraint',
		'Style',
		'Visible',
		'ZIndex',
		--behavior
		'Archivable',
		'ClipsDescendants',
		'NextSelectionDown',
		'NextSelectionLeft',
		'NextSelectionRight',
		'NextSelectionUp',
		--text
		'Font',
		'LineHeight',
		'MaxVisibleGraphemes',
		'RichText',
		'Text',
		'TextColor3',
		'TextScaled',
		'TextSize',
		'TextStrokeColor3',
		'TextStrokeTransparency',
		'TextTransparency',
		'TextTruncate',
		'TextWrapped',
		'TextXAlignment',
		'TextYAlignment',
		--localization
		'AutoLocalize',
		'RootLocalizationTable'
	},
	TextLabel = {
		--data
		'Active',
		'AnchorPoint',
		'AutomaticSize',
		'BackgroundColor3',
		'BackgroundTransparency',
		'BorderColor3',
		'BorderMode',
		'BorderSizePixel',
		'LayoutOrder',
		'Name',
		'Parent',
		'Position',
		'Rotation',
		'Selectable',
		'Size',
		'SizeConstraint',
		'Visible',
		'ZIndex',
		--behavior
		'Archivable',
		'ClipsDescendants',
		'NextSelectionDown',
		'NextSelectionLeft',
		'NextSelectionRight',
		'NextSelectionUp',
		--text
		'Font',
		'LineHeight',
		'MaxVisibleGraphemes',
		'RichText',
		'Text',
		'TextColor3',
		'TextScaled',
		'TextSize',
		'TextStrokeColor3',
		'TextStrokeTransparency',
		'TextTransparency',
		'TextTruncate',
		'TextWrapped',
		'TextXAlignment',
		'TextYAlignment',
		--localization
		'AutoLocalize',
		'RootLocalizationTable'
	},
	TextBox = {
		--data
		'Active',
		'AnchorPoint',
		'AutomaticSize',
		'BackgroundColor3',
		'BackgroundTransparency',
		'BorderColor3',
		'BorderMode',
		'BorderSizePixel',
		'ClearTextOnFocus',
		'LayoutOrder',
		'MultiLine',
		'Name',
		'Parent',
		'Position',
		'Rotation',
		'Selectable',
		'SelectionStart',
		'ShowNativeInput',
		'Size',
		'SizeConstraint',
		'TextEditable',
		'Visible',
		'ZIndex',
		--behavior
		'Archivable',
		'ClipsDescendants',
		'NextSelectionDown',
		'NextSelectionLeft',
		'NextSelectionRight',
		'NextSelectionUp',
		--text
		'Font',
		'LineHeight',
		'MaxVisibleGraphemes',
		'PlaceholderColor3',
		'PlaceholderText',
		'RichText',
		'Text',
		'TextColor3',
		'TextScaled',
		'TextSize',
		'TextStrokeColor3',
		'TextStrokeTransparency',
		'TextTransparency',
		'TextTruncate',
		'TextWrapped',
		'TextXAlignment',
		'TextYAlignment',
		--localization
		'AutoLocalize',
		'RootLocalizationTable'
	},
	ImageLabel = {
		--data
		'Active',
		'AnchorPoint',
		'AutomaticSize',
		'BackgroundColor3',
		'BackgroundTransparency',
		'BorderColor3',
		'BorderMode',
		'BorderSizePixel',
		'LayoutOrder',
		'Name',
		'Parent',
		'Position',
		'Rotation',
		'Selectable',
		'Size',
		'SizeConstraint',
		'Visible',
		'ZIndex',
		--behavior
		'Archivable',
		'ClipsDescendants',
		'NextSelectionDown',
		'NextSelectionLeft',
		'NextSelectionRight',
		'NextSelectionUp',
		--Image
		'Image',
		'ImageColor3',
		'ImageRectOffset',
		'ImageRectSize',
		'ImageTransparency',
		'ScaleType',
		'SliceScale',
		--localization
		'AutoLocalize',
		'RootLocalizationTable'
	},
	ImageButton = {
		--data
		'Active',
		'AnchorPoint',
		'AutoButtonColor',
		'AutomaticSize',
		'BackgroundColor3',
		'BackgroundTransparency',
		'BorderColor3',
		'BorderMode',
		'BorderSizePixel',
		'LayoutOrder',
		'Modal',
		'Name',
		'Parent',
		'Position',
		'Rotation',
		'Selectable',
		'Selected',
		'Size',
		'SizeConstraint',
		'Style',
		'Visible',
		'ZIndex',
		--behavior
		'Archivable',
		'ClipsDescendants',
		'NextSelectionDown',
		'NextSelectionLeft',
		'NextSelectionRight',
		'NextSelectionUp',
		--Image
		'HoverImage',
		'Image',
		'ImageColor3',
		'ImageRectOffset',
		'ImageRectSize',
		'ImageTransparency',
		'ScaleType',
		'SliceScale',
		--localization
		'AutoLocalize',
		'RootLocalizationTable'
	},
	Frame = {
		--data
		'Active',
		'AnchorPoint',
		'AutomaticSize',
		'BackgroundColor3',
		'BackgroundTransparency',
		'BorderColor3',
		'BorderMode',
		'BorderSizePixel',
		'LayoutOrder',
		'Name',
		'Parent',
		'Position',
		'Rotation',
		'Selectable',
		'Size',
		'SizeConstraint',
		'Style',
		'Visible',
		'ZIndex',
		--behavior
		'Archivable',
		'ClipsDescendants',
		'NextSelectionDown',
		'NextSelectionLeft',
		'NextSelectionRight',
		'NextSelectionUp',
		--localization
		'AutoLocalize',
		'RootLocalizationTable'
	},
	ScrollingFrame = {
		--data
		'Active',
		'AnchorPoint',
		'AutomaticSize',
		'BackgroundColor3',
		'BackgroundTransparency',
		'BorderColor3',
		'BorderMode',
		'BorderSizePixel',
		'LayoutOrder',
		'Name',
		'Parent',
		'Position',
		'Rotation',
		'Selectable',
		'Size',
		'SizeConstraint',
		'Visible',
		'ZIndex',
		--behavior
		'Archivable',
		'ClipsDescendants',
		'NextSelectionDown',
		'NextSelectionLeft',
		'NextSelectionRight',
		'NextSelectionUp',
		--scrolling
		'AutomaticCanvasSize',
		'BottomImage',
		'CanvasPosition',
		'CanvasSize',
		'ElasticBehavior',
		'HorizontalScrollBarInset',
		'MidImage',
		'ScrollBarImageColor3',
		'ScrollBarImageTransparency',
		'ScrollBarThickness',
		'ScrollingDirection',
		'ScrollingEnabled',
		'TopImage',
		'VerticalScrollBarInset',
		'VerticalScrollBarPosition',
		--localization
		'AutoLocalize',
		'RootLocalizationTable'
	},
	LocalScript = {
		--data
		'Name',
		'Parent',
		--behavior
		'Archivable',
		'Disabled'
	},
	ModuleScript = {
		--data
		'Name',
		'Parent',
		--behavior
		'Archivable',
	},
	UIGradient = {
		--appearance
		'Color',
		'Enabled',
		'Offset',
		'Rotation',
		'Transparency',
		--data
		'Name',
		'Parent',
		--behavior
		'Archivable'
	},
	UICorner = {
		--appearance
		'CornerRadius',
		--data
		'Name',
		'Parent',
		--behavior
		'Archivable',
	},
	UIAspectRatioConstraint = {
		--data
		'Name',
		'Parent',
		--behavior
		'Archivable',
		'AspectRatio',
		'AspectType',
		'DominantAxis'
	},
	UIGridLayout = {
		--appearance
		'CellPadding',
		'CellSize',
		--data
		'Name',
		'Parent',
		--behavior
		'Archivable',
		'FillDirection',
		'FillDirectionMaxCells',
		'HorizontalAlignment',
		'SortOrder',
		'StartCorner',
		'VerticalAlignment'
	},
	UIListLayout = {
		--appearance
		'Padding',
		--data
		'Name',
		'Parent',
		--behavior
		'Archivable',
		'FillDirection',
		'HorizontalAlignment',
		'SortOrder',
		'VerticalAlignment'
	},
	UIPadding = {
		--data
		'Name',
		'Parent',
		--behavior
		'Archivable',
		'PaddingBottom',
		'PaddingLeft',
		'PaddingRight',
		'PaddingTop'
	},
	UIPageLayout = {
		--appearance
		'Animated',
		'Circular',
		'EasingDirection',
		'EasingStyle',
		'Padding',
		'TweenTime',
		--data
		'Name',
		'Parent',
		--behavior
		'Archivable',
		'FillDirection',
		'HorizontalAlignment',
		'SortOrder',
		'VerticalAlignment',
		--input
		'GamepadInputEnabled',
		'ScrollWheelInputEnabled',
		'TouchInputEnabled'
	},
	UIScale = {
		--data
		'Name',
		'Parent',
		--behavior
		'Archivable',
		'Scale'
	},
	UIStroke = {
		--appearence
		'ApplyStrokeMode',
		'Color',
		'LineJoinMode',
		'Thickness',
		'Transparency',
		--data
		'Enabled',
		'Name',
		'Parent',
		--behavior
		'Archivable',
	},
	UISizeConstraint = {
		--data
		'Name',
		'Parent',
		--behavior
		'Archivable',
		'MaxSize',
		'MinSize'
	},
	UITableLayout = {
		--appearance
		'FillEmptySpaceColumns',
		'FillEmptySpaceRows',
		'Padding',
		--data
		'Name',
		'Parent',
		--behavior
		'Archivable',
		'FillDirection',
		'HorizontalAlignment',
		'MajorAxis',
		'SortOrder',
		'VerticalAlignment'
	},
	UITextSizeConstraint = {
		--data
		'Name',
		'Parent',
		--behavior
		'Archivable',
		'MaxTextSize',
		'MinTextSize'
	},
	VideoFrame = {
		--appearance
		'SelectionImageObject',
		--data
		'Active',
		'AnchorPoint',
		'AutomaticSize',
		'BackgroundColor3',
		'BackgroundTransparency',
		'BorderColor3',
		'BorderMode',
		'BorderSizePixel',
		'LayoutOrder',
		'Name',
		'Parent',
		'Position',
		'Rotation',
		'Selectable',
		'Size',
		'SizeConstraint',
		'Visible',
		'ZIndex',
		--behavior
		'Archivable',
		'ClipsDescendants',
		'NextSelectionDown',
		'NextSelectionLeft',
		'NextSelectionRight',
		'NextSelectionUp',
		--video
		'Looped',
		'Playing',
		'Resolution',
		'TimeLength',
		'TimePosition',
		'Video',
		'Volume',
		--localization
		'AutoLocalize',
		'RootLocalizationTable'
	},
	ViewportFrame = {
		--appearance
		'Ambient',
		'LightColor',
		'LightDirection',
		'SelectionImageObject',
		--data
		'Active',
		'AnchorPoint',
		'AutomaticSize',
		'BackgroundColor3',
		'BackgroundTransparency',
		'BorderColor3',
		'BorderMode',
		'BorderSizePixel',
		'CurrentCamera',
		'LayoutOrder',
		'Name',
		'Parent',
		'Position',
		'Rotation',
		'Selectable',
		'Size',
		'SizeConstraint',
		'Visible',
		'ZIndex',
		--behavior
		'Archivable',
		'ClipsDescendants',
		'NextSelectionDown',
		'NextSelectionLeft',
		'NextSelectionRight',
		'NextSelectionUp',
		--image
		'ImageColor3',
		'ImageTransparency',
		--localization
		'AutoLocalize',
		'RootLocalizationTable'
	},
	BillboardGui = {
		--data
		'Active',
		'Adornee',
		'AlwaysOnTop',
		'Enabled',
		'ExtentsOffset',
		'ExtentsOffsetWorldSpace',
		'LightInfluence',
		'MaxDistance',
		'Name',
		'Parent',
		'PlayerToHideFrom',
		'ResetOnSpawn',
		'Size',
		'SizeOffset',
		'StudsOffset',
		'StudsOffsetWorldSpace',
		'ZIndexBehavior',
		--behavior
		'Archivable',
		'ClipsDescendants',
		--localization
		'AutoLocalize',
		'RootLocalizationTable'
	},
	Hint = {
		--appearance
		'Text',
		--data
		'Name',
		'Parent',
		--behavior
		'Archivable'
	},
	Message = {
		--appearance
		'Text',
		--data
		'Name',
		'Parent',
		--behavior
		'Archivable'
	},
	BoolValue = {
		--data
		'Name',
		'Parent',
		'Value',
		--behavior
		'Archivable'
	},
	BrickColorValue = {
		--data
		'Name',
		'Parent',
		'Value',
		--behavior
		'Archivable'
	},
	CFrameValue = {
		--data
		'Name',
		'Parent',
		--behavior
		'Archivable'
	},
	Color3Value = {
		--data
		'Name',
		'Parent',
		'Value',
		--behavior
		'Archivable'
	},
	IntValue = {
		--data
		'Name',
		'Parent',
		'Value',
		--behavior
		'Archivable'
	},
	NumberValue = {
		--data
		'Name',
		'Parent',
		'Value',
		--behavior
		'Archivable'
	},
	ObjectValue = {
		--data
		'Name',
		'Parent',
		'Value',
		--behavior
		'Archivable'
	},
	RayValue = {
		--data
		'Name',
		'Parent',
		--behavior
		'Archivable'
	},
	StringValue = {
		--data
		'Name',
		'Parent',
		'Value',
		--behavior
		'Archivable'
	},
	Vector3Value = {
		--data
		'Name',
		'Parent',
		'Value',
		--behavior
		'Archivable'
	},
	Part = {
		--appearance
		'BrickColor',
		'CastShadow',
		'Color',
		'Material',
		'Reflectance',
		'Transparency',
		--data
		'Name',
		'Orientation',
		'Parent',
		'Position',
        --[[--transform
        'Origin Position',
        'Origin Orientation',
        --pivot
        'Pivot Offset Position',
        'Pivot Offset Orientation',]]
		--behavior
		'Anchored',
		'Archivable',
		'CanCollide',
		'CanTouch',
		'CollisionGroupId',
		'Locked',
		'Massless',
		--part
		'CustomPhysicalProperties',
		'RootPriority',
		'Shape',
		'Size',
		--assembly
		'AssemblyLinearVelocity',
		'AssemblyAngularVelocity'
	},
	MeshPart = {
		--appearance
		'BrickColor',
		'CastShadow',
		'Color',
		'DoubleSided',
		'Material',
		'MeshId',
		'Reflectance',
		'RenderFidelity',
		'TextureID',
		'Transparency',
		--data
		'Name',
		'Orientation',
		'Parent',
		'Position',
        --[[--transform
        'Origin Position',
        'Origin Orientation',
        --pivot
        'Pivot Offset Position',
        'Pivot Offset Orientation',]]
		--behavior
		'Anchored',
		'Archivable',
		'CanCollide',
		'CanTouch',
		'CollisionFidelity',
		'CollisionGroupId',
		'Locked',
		'Massless',
		--part
		'CustomPhysicalProperties',
		'RootPriority',
		'Size',
		--assembly
		'AssemblyLinearVelocity',
		'AssemblyAngularVelocity'
	},
	Humanoid = {
		--data
		'CameraOffset',
		'DisplayDistanceType',
		'DisplayName',
		'HealthDisplayDistance',
		'HealthDisplayType',
		'Name',
		'NameDisplayDistance',
		'NameOcclusion',
		'Parent',
		'RigType',
		--behavior
		'Archivable',
		'BreakJointsOnDeath',
		'RequiresNeck',
		--jump settings
		'AutoJumpEnabled',
		'JumpPower',
		'UseJumpPower',
		--control
		'AutoRotate',
		'Jump',
		'PlatformStand',
		'Sit',
		'TargetPoint',
		'WalkToPart',
		'WalkToPoint',
		--game
		'AutomaticScalingEnabled',
		'Health',
		'HipHeight',
		'MaxHealth',
		'MaxSlopeAngle',
		'WalkSpeed'
	},
	BoxHandleAdornment = {
		--appearance
		'Color3',
		'Transparency',
		--data
		'AdornCullingMode',
		'Adornee',
		'AlwaysOnTop',
		'Name',
		'Parent',
		'Size',
		'SizeRelativeOffset',
		'Visible',
		'ZIndex',
		--behavior
		'Archivable'
	},
	BindableEvent = {
		--data
		'Name',
		'Parent',
		--behavior
		'Archivable',
	},
	BindableFunction = {
		--data
		'Name',
		'Parent',
		--behavior
		'Archivable',
	},
	Configuration = {
		--data
		'Archivable',
		'Name',
		'Parent',
	},
	Folder = {
		--data
		'Archivable',
		'Name',
		'Parent',
	},
}

return properties]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="Script" referent="RBX20835B3CB6C0475DB0F12DC9257400C5">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">MainScript</string>
				<token name="RunContext">0</token>
				<string name="ScriptGuid">{CD6E9FBA-A570-480F-959E-882AEF062B4F}</string>
				<ProtectedString name="Source"><![CDATA[local selection = game:GetService'Selection'
local plugin_name = script.Parent.Name
local properties = require(script.Parent.Properties)
local tostring2 = require(script.Parent.ToString)
local ToString = tostring2[1];

local Dev1 = false

assert(plugin, 'tf?')

local totalscriptsmade = 0

function main()
	local function tablefindlower(Table, Value)
		for I, V in next, Table do
			if tostring(V):lower() == tostring(Value):lower() then
				return I, V
			end
		end
	end
	local function tablefindlowerByIndex(Table, Index)
		for I, V in next, Table do
			if tostring(I):lower() == tostring(Index):lower() then
				return I, V
			end
		end
	end

	local function DoGUI(GUI)
		local objects = {}
		local descendants = {}

		local function getRealProperties(descendant) 
			if descendant and properties[descendant.ClassName] then
				local defaultobject = Instance.new(descendant.ClassName)

				local realproperties = {}
				for i, property in pairs(properties[descendant.ClassName]) do
					if descendant[property] ~= defaultobject[property] then
						table.insert(realproperties, property)
					end
				end

				defaultobject:Destroy()

				return realproperties
			end
		end
		for i,descendant in pairs(GUI:GetDescendants()) do
			if descendant then
				if properties[descendant.ClassName] then
					table.insert(descendants, descendant)
				else
					warn(descendant.ClassName .. ' is not supported. Message TechHog#8984 to request support for this object.')
				end
			end
		end
		local totaldescendants = #descendants

		local function getname(object)
			if objects[object] then return objects[object] end
			local name = object.Name

			if name:sub(1, 1):match('%d') then
				name = '_' .. name
			end

			name = name:gsub('[^%w_]', '_'):gsub('___module__scripts___', '__module_scripts__'):gsub('___Hide__Object___', '__Hide_Object__')

				--[[local duplicates = 0

				for o, n in pairs(objects) do
					local add1 = '__' .. tostring(duplicates)
					local add2 = '__' .. tostring(duplicates + 1)
					if o ~= object and (n == name or n == name .. add1 or n == name .. add2) then
						duplicates = duplicates + 1
						print(o, 'found a duplicate, #' .. tostring(duplicates))
					end
				end

				if duplicates > 0 then
					name = name .. '__' .. tostring(duplicates)
				end]]

			;(function() --duplicate handler
				if tablefindlower(objects, name) then
					local count = 2
					while true do
						local dupe = false
						for i,v in next, objects do
							if v == name .. '__' .. tostring(count) then
								dupe = true
								break
							end
						end

						if not dupe then
							name = name .. '__' .. tostring(count)

							return name
						end

						count += 1
					end
				end
			end)();

			objects[object] = name

			return name
		end

		local function descendantOfTypeExists(type)
			for i, descendant in pairs(descendants) do
				if descendant and descendant:IsA(type) then
					return true
				end
			end
		end
		local function attributesExist()
			for i, v in pairs(GUI:GetAttributes()) do
				return true
			end
			for i, v in pairs(descendants) do
				for i,v in pairs(v:GetAttributes()) do
					return true
				end
			end
		end

		totalscriptsmade = totalscriptsmade + 1

		local source = '--GuiToLua V3\n'

		local GUIname = getname(GUI)
		local ModuleScriptExists = descendantOfTypeExists('ModuleScript')
		local LocalScriptExists = descendantOfTypeExists('LocalScript')


		if Dev1 then
			source = source .. '\nlocal ___Hide__Object___ = loadstring(game:HttpGet(\'https://raw.githubusercontent.com/TechHog8984/Hide-Instance/main/script/HideObject.lua\'))()\n\n'

			--objects
			source = source .. '--objects\n'

			local propertiesString = '{ClassName = \'ScreenGui\', Parent = game:GetService\'Players\'.LocalPlayer:WaitForChild(\'PlayerGui\', math.huge), '
			local propertiesLength = #getRealProperties(GUI) - 1

			local defaultGui = Instance.new'ScreenGui'

			for I, Property in next, getRealProperties(GUI) do
				if GUI[Property] ~= defaultGui[Property] then
					if Property ~= 'Parent' then
						propertiesString = propertiesString .. Property .. ' = ' .. ToString(GUI[Property], true)
					end

					if propertiesLength > 1 and I < propertiesLength then
						propertiesString = propertiesString .. ', '
					end
				end
			end

			propertiesString = propertiesString .. '}'

			source = source .. ('local %s = ___Hide__Object___.Create%s\n\n'):format(GUIname, propertiesString)

			for I, Descendant in next, descendants do
				if Descendant then
					local Properties = getRealProperties(Descendant)
					local Name = getname(Descendant)
					if Name and Properties then
						local propertiesString = ('{ClassName = %s, '):format(ToString(Descendant.ClassName))
						local propertiesLength = #Properties

						for I, Property in next, Properties do
							if Property then
								local Value = Descendant[Property]

								local PropertyString = objects[Value] or ToString(Value, true)

								propertiesString = propertiesString .. Property .. ' = ' .. PropertyString

								if propertiesLength > 1 and I < propertiesLength then
									propertiesString = propertiesString .. ', '
								end
							end
						end

						propertiesString = propertiesString .. '}'

						source = source .. ('local %s = ___Hide__Object___.Create%s\n'):format(Name, propertiesString)
					end
				end
			end

		else
			--objects
			source = source .. '\n--objects\n'

			source = source .. ('local %s = Instance.new\'%s\'\n\n'):format(GUIname, GUI.ClassName)

			for i, descendant in pairs(descendants) do
				if descendant and properties[descendant.ClassName] then
					local name = getname(descendant)
					source = source .. ('local %s = Instance.new\'%s\'\n'):format(name, descendant.ClassName)
				end
			end

			--properties
			source = source .. '\n--properties\n'

			if GUI:IsA'ScreenGui' then
				local defaultGui = Instance.new'ScreenGui'
				for i, property in pairs(properties.ScreenGui) do
					if GUI[property] ~= defaultGui[property] then
						local propertyexists, result = pcall(function()return GUI[property] end)
						if propertyexists then
							if property == 'Parent' then
								source = source .. ('%s.Parent = game:GetService\'Players\'.LocalPlayer:WaitForChild(\'PlayerGui\', math.huge)\n'):format(GUIname)
							else
								source = source .. ('%s.%s = %s\n'):format(GUIname, property, ToString(result))
							end
						end
					end
				end
			elseif GUI:IsA'Folder' then
				local defaultFolder = Instance.new'ScreenGui'
				for i, property in pairs(properties.Folder) do
					if GUI[property] ~= defaultFolder[property] then
						local propertyexists, result = pcall(function()return GUI[property] end)
						if propertyexists then
							source = source .. ('%s.%s = %s\n'):format(GUIname, property, ToString(result))
						end
					end
				end
			end

			source = source .. '\n'

			for descindex, descendant in pairs(descendants) do
				local realproperties = getRealProperties(descendant)
				if realproperties then
					local name = getname(descendant)

					for propindex, property in pairs(realproperties) do
						local propertyexists, result = pcall(function()return descendant[property] end)
						if propertyexists then
							local totalproperties = #realproperties

							local propertystring = objects[result] or ToString(result)

							local str = ('%s.%s = %s'):format(name, property, propertystring)

							if descindex == totaldescendants and propindex == totalproperties then
								source = source .. str
							else
								source = source .. str .. '\n'
							end

							--source = source .. str
						end
					end
					if totaldescendants > 1 and descindex < totaldescendants then
						source = source .. '\n'
					end
				end
			end
		end

		--attributes

		if attributesExist() then
			source = source .. '\n--attributes\n'

			for attribute, value in pairs(GUI:GetAttributes()) do
				source = source .. ('%s:SetAttribute(%s, %s)\n'):format(GUIname, ToString(attribute), ToString(value))
			end

			source = source .. '\n'

			for i, descendant in pairs(descendants) do
				if descendant then
					local name = getname(descendant)
					for attribute, value in pairs(descendant:GetAttributes()) do
						source = source .. ('%s:SetAttribute(%s, %s)\n'):format(name, ToString(attribute), ToString(value))
					end
					if #descendant:GetAttributes() > 0 then
						source = source .. '\n'
					end
				end
			end 
		end

		--modulescripts

		if ModuleScriptExists then
			source = source .. '\n\n--module scripts\n\nlocal ___module__scripts___ = {}\n\n'

			for i, descendant in pairs(descendants) do
				if descendant and descendant:IsA'ModuleScript' then
					local name = getname(descendant)
					
					local requiremessage = [[

	local oldrequire = require
	local require = function(value)
		return ___module__scripts___[value]() or oldrequire(value)
	end

]]

					source = source .. ('___module__scripts___[%s] = (function()\n\t%s\nlocal script = %s\n\n\t%s\nend)\n'):format(name, requiremessage, name, descendant.Source:gsub('\n', '\n\t'))
				end
			end
		end

		--scripts
		if LocalScriptExists then
			source = source .. '\n--scripts\n'

			for i, descendant in pairs(descendants) do
				if descendant and descendant:IsA'LocalScript' then

					local requiremessage = [[

	local oldrequire = require
	local require = function(value)
		return ___module__scripts___[value]() or oldrequire(value)
	end

]]

					source = source .. ([[
coroutine.wrap(function()
	local script = %s
	%s
	%s
end)()
]]										):format(getname(descendant), (ModuleScriptExists and requiremessage) or '', descendant.Source:gsub('\n', '\n\t'))
					--source = source .. ('coroutine.wrap(function()\n\tlocal script = %s\nlocal oldrequire = require\nlocal require = function(value)return ___modules__scripts___[value] or oldrequire(value)end\n end)()')
				end
			end
		end
		return source
	end

	for i, selected in pairs(selection:Get()) do
		if selected:IsA'ScreenGui' then
			local source = DoGUI(selected);
			
			--credits to Gooncreeper for fixing the script being too long issue
			if #source < 200000 then
				local script = Instance.new'LocalScript';
				script.Parent = selected.Parent;
				script.Name = selected.Name .. ' - guitolua v3 #' .. tostring(totalscriptsmade);
				script.Source = source;

				selection:Set{script};
				plugin:OpenScript(script);
			else
				print("Source is >= 200000 characters, splitting into folder");
				local sources = Instance.new("Folder");
				sources.Parent = selected.Parent;
				sources.Name = selected.Name .. ' - guitolua v3 #' .. tostring(totalscriptsmade);

				local p = 1
				local c = 1
				repeat
					local a = Instance.new("Script", sources)
					a.Source = source:sub(p,p+199998)
					a.Name = "Source" .. c

					p += 199999
					c += 1
				until p > #source;
				
				selection:Set{sources};
			end
			
		elseif selected:IsA'Folder' then
			local script = Instance.new'LocalScript'
			script.Parent = selected.Parent
			script.Name = selected.Name .. ' - guitolua v3 #' .. tostring(totalscriptsmade)

			script.Source = DoGUI(selected)
			for I, Child in next, selected:GetChildren() do
				if Child and Child:IsA'ScreenGui' then
					--script.Source ..= '\n\n' .. DoGUI(Child)
				end
			end

			selection:Set{script}
			plugin:OpenScript(script)
		end
	end
end

local tb = plugin:CreateToolbar(plugin_name)
local button = tb:CreateButton('Open / Close', '', 'rbxassetid://6910443946')
local info = DockWidgetPluginGuiInfo.new(
	Enum.InitialDockState.Float,
	false,
	false,
	291,
	232,
	291,
	232
)
local widget = plugin:CreateDockWidgetPluginGui(plugin_name, info)
widget.Enabled = false
widget.Title = plugin_name
widget.Name = plugin_name
button.Click:connect(function()
	widget.Enabled = not widget.Enabled
end)

local gui = script.Parent.GuiToLuaV3GUI

gui.Size = UDim2.new(1, 0, 1, 0)
gui.Position = UDim2.new(0, 0, 0, 0)
gui.Parent = widget
gui.title.Text = plugin_name

gui.convert.MouseButton1Click:Connect(main)

gui.dev1.MouseButton1Click:Connect(function()
	Dev1 = not Dev1

	gui.dev1.Text = 'dev 1: ' .. tostring(Dev1)
end)]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="Frame" referent="RBX42F17BC387EB446D98B716082E5343AC">
			<Properties>
				<bool name="Active">false</bool>
				<Vector2 name="AnchorPoint">
					<X>0</X>
					<Y>0</Y>
				</Vector2>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="AutoLocalize">true</bool>
				<token name="AutomaticSize">0</token>
				<Color3 name="BackgroundColor3">
					<R>0.152941182</R>
					<G>0.152941182</G>
					<B>0.152941182</B>
				</Color3>
				<float name="BackgroundTransparency">0</float>
				<Color3 name="BorderColor3">
					<R>0.105882362</R>
					<G>0.164705887</G>
					<B>0.207843155</B>
				</Color3>
				<token name="BorderMode">0</token>
				<int name="BorderSizePixel">0</int>
				<bool name="ClipsDescendants">false</bool>
				<bool name="Draggable">false</bool>
				<int name="LayoutOrder">0</int>
				<string name="Name">GuiToLuaV3GUI</string>
				<Ref name="NextSelectionDown">null</Ref>
				<Ref name="NextSelectionLeft">null</Ref>
				<Ref name="NextSelectionRight">null</Ref>
				<Ref name="NextSelectionUp">null</Ref>
				<UDim2 name="Position">
					<XS>0</XS>
					<XO>114</XO>
					<YS>0</YS>
					<YO>435</YO>
				</UDim2>
				<Ref name="RootLocalizationTable">null</Ref>
				<float name="Rotation">0</float>
				<bool name="Selectable">false</bool>
				<token name="SelectionBehaviorDown">0</token>
				<token name="SelectionBehaviorLeft">0</token>
				<token name="SelectionBehaviorRight">0</token>
				<token name="SelectionBehaviorUp">0</token>
				<bool name="SelectionGroup">false</bool>
				<Ref name="SelectionImageObject">null</Ref>
				<int name="SelectionOrder">0</int>
				<UDim2 name="Size">
					<XS>0</XS>
					<XO>291</XO>
					<YS>0</YS>
					<YO>232</YO>
				</UDim2>
				<token name="SizeConstraint">0</token>
				<int64 name="SourceAssetId">-1</int64>
				<token name="Style">0</token>
				<BinaryString name="Tags"></BinaryString>
				<bool name="Visible">true</bool>
				<int name="ZIndex">1</int>
			</Properties>
			<Item class="TextButton" referent="RBXDE5E00B513C043A4AB9446C921426CD0">
				<Properties>
					<bool name="Active">true</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoButtonColor">true</bool>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.105882362</R>
						<G>0.105882362</G>
						<B>0.105882362</B>
					</Color3>
					<float name="BackgroundTransparency">0.5</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">0</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">17</token>
					<Font name="FontFace">
						<Family><url>rbxasset://fonts/families/GothamSSm.json</url></Family>
						<Weight>400</Weight>
						<Style>Normal</Style>
						<CachedFaceId><url>rbxasset://fonts/GothamSSm-Book.otf</url></CachedFaceId>
					</Font>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<int name="MaxVisibleGraphemes">-1</int>
					<bool name="Modal">false</bool>
					<string name="Name">convert</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>54</XO>
						<YS>0</YS>
						<YO>90</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">true</bool>
					<bool name="Selected">false</bool>
					<token name="SelectionBehaviorDown">0</token>
					<token name="SelectionBehaviorLeft">0</token>
					<token name="SelectionBehaviorRight">0</token>
					<token name="SelectionBehaviorUp">0</token>
					<bool name="SelectionGroup">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<int name="SelectionOrder">0</int>
					<UDim2 name="Size">
						<XS>0</XS>
						<XO>182</XO>
						<YS>0</YS>
						<YO>49</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text">Convert!</string>
					<Color3 name="TextColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<bool name="TextScaled">false</bool>
					<float name="TextSize">30</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">1</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">true</bool>
					<token name="TextXAlignment">2</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
				<Item class="UICorner" referent="RBX1A4391C572B94F9A90036C1530BC6241">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<UDim name="CornerRadius">
							<S>0</S>
							<O>8</O>
						</UDim>
						<string name="Name">UICorner</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="TextLabel" referent="RBXFA8A59F97F1646859390F4A83614069E">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">0</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">45</token>
					<Font name="FontFace">
						<Family><url>rbxasset://fonts/families/Ubuntu.json</url></Family>
						<Weight>400</Weight>
						<Style>Normal</Style>
						<CachedFaceId><url>rbxasset://fonts/Ubuntu-Regular.ttf</url></CachedFaceId>
					</Font>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<int name="MaxVisibleGraphemes">-1</int>
					<string name="Name">title</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>0</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<token name="SelectionBehaviorDown">0</token>
					<token name="SelectionBehaviorLeft">0</token>
					<token name="SelectionBehaviorRight">0</token>
					<token name="SelectionBehaviorUp">0</token>
					<bool name="SelectionGroup">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<int name="SelectionOrder">0</int>
					<UDim2 name="Size">
						<XS>0</XS>
						<XO>291</XO>
						<YS>0</YS>
						<YO>33</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text">Gui To Lua V3</string>
					<Color3 name="TextColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<bool name="TextScaled">false</bool>
					<float name="TextSize">37</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">1</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">false</bool>
					<token name="TextXAlignment">2</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
			</Item>
			<Item class="TextButton" referent="RBXB8A795A6F8024D6E8286B28CE33AE4F9">
				<Properties>
					<bool name="Active">true</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoButtonColor">false</bool>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.105882362</R>
						<G>0.105882362</G>
						<B>0.105882362</B>
					</Color3>
					<float name="BackgroundTransparency">0.5</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">0</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">17</token>
					<Font name="FontFace">
						<Family><url>rbxasset://fonts/families/GothamSSm.json</url></Family>
						<Weight>400</Weight>
						<Style>Normal</Style>
						<CachedFaceId><url>rbxasset://fonts/GothamSSm-Book.otf</url></CachedFaceId>
					</Font>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<int name="MaxVisibleGraphemes">-1</int>
					<bool name="Modal">false</bool>
					<string name="Name">dev1</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>16</XO>
						<YS>0</YS>
						<YO>182</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">true</bool>
					<bool name="Selected">false</bool>
					<token name="SelectionBehaviorDown">0</token>
					<token name="SelectionBehaviorLeft">0</token>
					<token name="SelectionBehaviorRight">0</token>
					<token name="SelectionBehaviorUp">0</token>
					<bool name="SelectionGroup">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<int name="SelectionOrder">0</int>
					<UDim2 name="Size">
						<XS>0</XS>
						<XO>121</XO>
						<YS>0</YS>
						<YO>32</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text">dev 1: false</string>
					<Color3 name="TextColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<bool name="TextScaled">false</bool>
					<float name="TextSize">21</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">1</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">true</bool>
					<token name="TextXAlignment">2</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
				<Item class="UICorner" referent="RBX2ABACD19EA1C48A9AB98D3D826DB849D">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<UDim name="CornerRadius">
							<S>0</S>
							<O>8</O>
						</UDim>
						<string name="Name">UICorner</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
		</Item>
	</Item>
</roblox>
